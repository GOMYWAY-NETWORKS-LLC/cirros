#!/bin/bash

burl="https://launchpad.net/ubuntu/+archive/primary/+files/linux-image"
outdir="./download"
def_arches="i386 x86_64 arm powerpc ppc64 ppc64le aarch64"
DEBUG=0

debug() {
    [ "${DEBUG}" -ge "${1}" ] || return 0;
    shift;
    error "$@"
}
error() { echo "$@" 1>&2; }
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }
dl() {
    local url="$1" target="$2" tfile="" t=""
    [ -f "$target" ] && return
    t=$(dirname "$target")
    tfile=$(mktemp "$t/.${0##*/}.XXXXXX") || return
    wget "$url" -O "$tfile" &&
        mv "$tfile" "$target" ||
        { t=$?; rm -f "$tfile"; return $t; }
}

debs2tar() {
    local out="$1" t="" deb=""
    shift
    t=$(dirname "$out")
    tdir=$(mktemp -d "$t/.${0##*/}.XXXXXX") || return
    debug 1 "creating $out in tempdir at $tdir from $*"
    mkdir "$tdir/ex"
    for deb in "$@"; do
        debug 2 "extracting $deb"
        dpkg -x "$deb" "$tdir/ex" || {
            error "failed dpkg -x $deb";
            rm -Rf "$tdir";
            return 1;
        }
    done
    debug 2 "creating kernel.tar.gz"
    tar -C "$tdir/ex" -czf "$tdir/kernel.tar.gz" . &&
        mv "$tdir/kernel.tar.gz" "$out" || {
            error "failed creating tarball from $*";
            rm -Rf "$tdir"
            return 1;
        }
    return 0
}

[ "$1" = "--outdir" ] && { outdir="$1" && shift; }
kver="$1"
shift

if [ $# -eq 0 ]; then
   set -- ${def_arches}
fi

[ -d "$outdir" ] || mkdir -p "$outdir" ||
   fail "failed mkdir $outdir"


[ -n "$kver" ] || fail "must give kernel version"

# version like 3.13.0-52.86
#              3.19.0-20.20~14.04.1

kpart=${kver%-*}
upart=${kver#*-}
abi=${upart%%.*}
kmajor=${kpart%%.*}
kminor=${kpart#*.}; kminor=${kminor%.*}
kmicro=${kpart#*.*.}

case "$kmajor.$kminor" in
   3.2|3.13|3.19|4.4) :;;
   *) error "WARN: possibly unknown kernel version $kmajor.$kminor.";;
esac

for arch in "$@"; do
    xarch=$arch;
    [ "$arch" = "x86_64" ] && xarch="amd64";
    if [ "$kmajor.$kminor" = "3.2" ]; then
        case "$arch" in
            x86_64|i386) flav="virtual";;
            arm) flav="omap"; xarch="armel";;
            powerpc) flav="powerpc64-smp";;
            *) fail "unknown kernel:arch for $kver:$arch"
        esac
    else
        case "$arch" in
            arm) xarch="armhf"; flav="generic";;
            aarch64) xarch=arm64; flav="generic";;
            powerpc|ppc64) xarch=powerpc; flav="powerpc64-smp";;
            ppc64le) xarch="ppc64el"; flav="generic";;
            x86_64|i386|arm64) flav="generic";;
            *) fail "unknown kernel:arch for $kver:$arch"
        esac
    fi
    case $xarch in
        amd64|i386|ppc64el|s390x) extra="-extra";;
        *) extra="";
    esac
    debs=""
    for epkg in "" $extra; do
        url="$burl${epkg}-${kmajor}.${kminor}.${kmicro}-${abi}-${flav}_${kver}_${xarch}.deb"
        dl "$url" "$outdir/${url##*/}" || fail "failed dl $url"
        ln -sf ${url##*/} "$outdir/kernel-${arch}${epkg}.deb" ||
            fail "failed symlink for $outdir/kernel-$arch${epkg}.deb"
        debs="${debs} ${outdir}/${url##*/}"
    done
    tar="linux-image-${kver}-${flav}-${xarch}.tar.gz"
    if [ -f "$outdir/${tar}" ]; then
        error "re-used existing $outdir/${tar}"
    else
        debs2tar "$outdir/${tar}" ${debs} ||
            fail "failed debs2tar to $tar on $debs"
        error "wrote $outdir/${tar}"
    fi
    ln -sf "${tar}" "$outdir/kernel-${arch}.tar.gz" ||
        fail "failed symlink for $outdir/kernel-$arch${epkg}.deb"
done

# vi: tabstop=4 expandtab
