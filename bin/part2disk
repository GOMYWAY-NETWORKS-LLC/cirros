#!/bin/sh
#    part2disk - wrap a partition image in a disk image
#
#    Copyright (C) 2010 Canonical Ltd.
#
#    Authors: Scott Moser <smoser@canonical.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

DEF_SECTOR_SIZE=512
DEBUG=0
base_d=$(dirname $(readlink -f "${0}"))
PATH="${PATH}:${base_d}"
error() { echo "$@" 1>&2; }
debug() {
	[ "${DEBUG}" -ge "${1:-0}" ] && shift || return 0;
	error "$@";
}
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }
Usage() {
	cat <<EOF
Usage: ${0##*/} [options] partition-image disk-image

   create disk image 'disk-image' with 'partition-image' in a partition
   inside it.

   options:
      -G | --grub       install grub to disk image mbr
         | --grub1      install grub1 to disk image mbr
      -s | --size  S    create the disk image of size 'S'.
                        default is large enough to fit partition-image
      -v | --verbose    increase verbosity
EOF
}
bad_Usage() { Usage 1>&2; fail "$@"; }
human2bytes() {
   # converts size suitable for input to resize2fs to bytes
   # s:512 byte sectors, K:kilobytes, M:megabytes, G:gigabytes
   # none: block size of the image
   local input=${1} defunit=${2:-1024}
   local unit count;
   case "$input" in
      *s) count=${input%s}; unit=512;;
      *K) count=${input%K}; unit=1024;;
      *M) count=${input%M}; unit=$((1024*1024));;
      *G) count=${input%G}; unit=$((1024*1024*1024));;
      *)  count=${input}  ; unit=${2:-1024};;
   esac
   _RET=$((${count}*${unit}))
}

short_opts="b:c:Ghs:v"
long_opts="grub1,grub,help,size:,verbose"
getopt_out=$(getopt --name "${0##*/}" \
	--options "${short_opts}" --long "${long_opts}" -- "$@") &&
	eval set -- "${getopt_out}" ||
	bad_Usage

ssize=${DEF_SECTOR_SIZE}
size_in=""
grub_ptnum=1
grub=0
grub1=0
while [ $# -ne 0 ]; do
	cur=${1}; next=${2};
	case "$cur" in
		-G|--grub) grub=1;;
		-G|--grub1) grub1=1;;
		-h|--help) Usage; exit 0;;
		-s|--size) size_in=$2; shift;;
		-v|--verbose) DEBUG=$((${DEBUG}+1));;
		--) shift; break;;
	esac
	shift;
done

[ $# -eq 2 ] || bad_Usage "must supply partition image and output file"

pimg=${1}
dimg=${2}

{ [ ${grub} -eq 0 ] || phelper=$(command -v part2disk-grubhelper); } ||
	fail "no part2disk-grubhelper in PATH"
[ $grub1 -eq 0 ] || command -v grub >/dev/null || fail "no 'grub' in path";

[ -f "${pimg}" -o -b "${pimg}" ] || fail "${pimg}: not a file or block device"

if [ -b "${pimg}" ]; then
	kname=$(readlink -f "${pimg}") &&
		pimg_s=$(awk '$4 == kn { print $3 * 1024 }' \
		             "kn=${kname##*/}" /proc/partitions) &&
		[ -n "${pimg_s}" ] ||
		fail "failed to read size of ${pimg} from /proc/partitions"
else
	pimg_s=$(stat --format "%s" "${pimg}") ||
		fail "failed to get size of ${pimg}"
fi

padding=$((1024*1024*2))  # 1MB front and end
if [ -n "${size_in}" ]; then
	human2bytes "${size_in}" 1 || fail "failed to convert ${size_in} to bytes"
	size=${_RET}
else
	# no size specified, get enough to fit part_img, 1M header and 1M end.
	size=$((${pimg_s}+$padding))
	if [ $((${pimg_s}%$ssize)) -ne 0 ]; then
		size=$((($pimg_s/$ssize)*($ssize)))
	fi
fi

if [ ${size} -lt $((${pimg_s}+${padding})) ]; then
	fail "size $size not large enough to fit $pimg_s+$padding"
fi

debug 1 "using $size bytes sector size $ssize"

debug 2 "zeroing first 1M of $dimg"
dd if=/dev/zero of="${dimg}" bs=1M count=1 2>/dev/null ||
    fail "failed to write to ${dimg}"

# copy partition image. this writes $pimg bytes even if that is
# not divivisble by $ssize
debug 1 "copying ${pimg} to partition in ${dimg}"
dd if="$pimg" seek=$(((1024*1024)/$ssize)) bs=$ssize conv=notrunc \
	of="$dimg" 2>/dev/null ||
	fail "failed to write ${pimg} into ${dimg}"

# zero any unwritten portion of the final sector
leftover=$(($ssize-(${pimg_s}%$ssize)))
if [ $leftover -ne $ssize ]; then
	dd if=/dev/zero of="$dimg" bs=1 seek=$((${pimg_s}+1024*1024)) \
		conv=notrunc count=$leftover 2>/dev/null ||
	fail "failed to finish final sector of $pimg"
fi

# we've now written 1M front + round-sectors. now write one more MB at end.
dd if=/dev/zero "of=$dimg" bs=512 seek=$((($size/512)-2048)) count=2048 \
	conv=notrunc ||
	fail "failed to write final 1M to $pimg"

debug 1 "writing partition table to ${dimg}"
sfdisk_out=$(sfdisk --unit=S "${dimg}" 2>&1 <<EOF
2048,,L,*
EOF
)

[ $? -eq 0 ] || {
	error "${sfdisk_out}";
	fail "failed to create partition table";
}

if [ ${grub} -ne 0 ]; then
	debug 1 "invoking part2disk-grubhelper ${dimg}"
	sudo "${phelper}" "${dimg}" ||
		fail "part2disk-grubhelper ${dimg} failed"
fi

if [ $grub1 -ne 0 ]; then
	debug 1 "installing grub"
	grub --no-floppy --batch <<EOF
device (hd0) $dimg
root (hd0,0)
setup (hd0)
quit
EOF
fi

error "wrote to ${dimg}"
# vi: ts=4 noexpandtab
